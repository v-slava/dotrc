# Copy "some_text\n" to clipboard:
echo some_text | clip

# Execute command and do not close cmd.exe window:
cmd /K "cd C:\dir_1\dir_2 && git status"
# Execute COMMAND and exit afterwards (close cmd.exe window):
cmd /C "COMMAND"

# Do not print a command being executed just once:
@ SOME_COMMAND

:: Do not print commands being executed:
@echo off

# Print empty line:
echo.

# Print without newline:
echo | set /p="some text without newline in the end"

# env analog:
set

# Assign and reference variable in batch file (do not quote VALUE):
set VAR_NAME=VALUE
echo %VAR_NAME%

# To setup shortcut on start panel:
# 1) in "Target" write:
#    C:\Windows\System32\cmd.exe /C "C:\bat_files\do_something.bat"
# 2) drag it to start panel.

# clear screen in cmd.exe:
cls

# print exit code:
echo %errorlevel%

# check exit code:
if %errorlevel% equ 0 (echo True) else (echo False)

# Print home directory:
echo %homedrive%%homepath%

# Bat file command line arguments:
%0, %1, %2, ...

# All arguments ("%@" in linux):
%*

# Check if variable is empty:
if [%VARIABLE%] == [] (
   cmd1
   cmd2
)

# Wait for keypress:
pause
set /p DUMMY=Hit ENTER to exit...

# Exit on first error (cmd.exe):
some_cmd_1 || goto error
some_cmd_2 || goto error
exit
:error
set /p DUMMY=Hit ENTER to exit...

# execute cmd_2 only if cmd_1 succeeded:
cmd_1 && cmd_2

# execute both cmd_1 and cmd_2 (independent of exit code, similar to ';' in sh):
cmd_1 & cmd_2

# Open with default application (starts browser):
start "" https://www.google.com

# Create folder:
mkdir dir_1/subdir_2

# Create symbolic link:
mklink LINK TARGET

# cat file1 file2 > file3
type file1 file2 > file3

# which executable:
where executable

# Check whether file/folder/directory exists:
if not exist FILE (
    CMD1
) else (
    CMD2
)

# Delete directory if exists:
if exist C:\some\directory\nul rmdir /s /q C:\some\directory

# Print current working directory (echo $PWD):
echo %cd%

# Loop through files in directory:
for [\r] %%f in (some\directory\*.txt) do echo "file = |%%f|"
# Note: use '%' in command line, '%%' in batch file.
# Note: variable name we are iterating over can't be more than 1 symbol long.
# Note: \r means recursively

# Setup ssh-server alternative:
winrm quickconfig

# Execute command on remote server ("ssh HOSTNAME COMMAND" alternative):
winrs -r:HOSTNAME "COMMAND && cmd2 && cmd3"
# same as above, but doesn't require winrm, returns immediately:
wmic /node:HOSTNAME process call create "cmd.exe /c COMMAND"
# see also: FreeSSHd, Bitvise WinSSHD

# To run bat file from shortcut's folder (not actual bat file folder):
# right click on shortcut -> properties -> Shortcut (tab) -> clear "Start in:"

# VirtualBox: create raw hard drive:
"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" internalcommands createrawvmdk -filename "C:\Users\USER_NAME\VirtualBox VMs\VM_NAME\HDD_NAME.vmdk" -rawdisk \\.\PhysicalDrive#

# Copy directory recursive:
xcopy /e /f /h /i /r /y C:\src_dir C:\dst_dir

# Copy FILE over samba:
copy FILE \\HOST\c$\dir_1\dir_2\

# find -name '*.cpp':
dir /s /b *.cpp

# find -name '*.cpp' | xargs cat:
forfiles /s /m *.cpp /c "cmd /c type @file"

# time cmd
echo %time% && cmd %% echo %time%
# powershell:
Measure-Command {cmd}

# nc, netcat, telnet:
New-Object System.Net.Sockets.TcpClient("8.8.8.8", 8080)

# Preprocess (msvc):
1) Create new win32 console msvc project. Add single source file with the following contents:
     #include "preprocessed.i"
     int main(void) { return 0; }
2) Copy to clipboard YOUR_COMPILATION_OPTIONS:
   in Visual Studio: right click on your project -> Properties -> Configuration Properties -> C/C++ -> Command Line.
3) Create file "preprocess.bat" with the following contents:
     call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x64 || goto error
     cd C:\your\path\to\project || goto error
     cl.exe YOUR_COMPILATION_OPTIONS ^
     some_file.cpp /C /EP > C:\your\path\to\preprocessed\preprocessed\preprocessed.i || goto error
     exit
     :error
     set /p DUMMY=Hit ENTER to exit...
4) Run "preprocess.bat"
5) Compile your preprocessing project.
