#!/bin/bash

# exec "C:/Program Files/SlickEdit Pro 20.0.0/win/vs.exe" $@

WINDOWS=false
if [ -n "$WINDIR" ]; then
    WINDOWS=true
fi

if [ -z "$EDITOR" ]; then
    if [ "$WINDOWS" = "true" ]; then
        EDITOR=vim
    else
        EDITOR=nvim
    fi
fi

if [ "$WINDOWS" = "true" ]; then
    # PREFIX="C:/files/other_files/emacs-25.3_1-x86_64/bin/"
    PREFIX="C:/Program Files/Git/usr/bin/"
    SUFFIX=".exe"
else
    PREFIX=
    SUFFIX=
fi

ARGS=()
for arg in "$@" ; do
    case "$arg" in

# "--wait" is my own argument.
# "--nofork" is an argument, accepted by vim
# (it is called with it from vifm when renaming a file/folder).
# "-f" is an argument, accepted by vim ("foreground": do not fork).

        "--wait" | "--nofork" | "-f") WAIT=true ;;

        "--get-editor") GET_EDITOR=true ;;
        "--diff") DIFF=true ;;

        # "--emacs") EDITOR=emacs ;;
        # "--kak") EDITOR=kak ; MAIN_KAK_SESSION=main_kak_session ;;

        *) ARGS+=("$arg") ;;
    esac
done

# if [ $WINDOWS = false ]; then
#     ID=$(id -u)
#     if [ $ID -eq 0 ]; then
#         EDITOR=vim
#     fi
#     if [ -z "$DISPLAY" ]; then
#         EDITOR=vim
#     fi
# fi

CLIENT=${EDITOR}
SERVER=${EDITOR}
case "$EDITOR" in
    vim | nvim | kak)
        ;;
    emacs)
        CLIENT=emacsclient # see also emacsclientw
        if [ $WINDOWS = true ]; then
            SERVER=runemacs
        else
            SERVER=emacs
        fi
        ;;

esac
CLIENT_EXE="${PREFIX}${CLIENT}${SUFFIX}"
SERVER_EXE="${PREFIX}${SERVER}${SUFFIX}"

if [ "$GET_EDITOR" = "true" ]; then
    exec echo "$CLIENT_EXE"
fi

if [ "$EDITOR" = "vim" ] || [ "$EDITOR" = "nvim" ]; then
    ARGS_TMP=()
    if [ "$DIFF" = "true" ]; then
        ARGS_TMP+=("-d")
    else
        ARGS_TMP+=("-p")
    fi
    # --nofork vim and nvim handle themselves...
    # There is no need to handle "$WAIT" here...
    ARGS=("${ARGS_TMP[@]}" "${ARGS[@]}")
    exec "$CLIENT_EXE" "${ARGS[@]}"
fi

server_running()
{
    if [ $WINDOWS = true ]; then
        tasklist | grep -q "$SERVER" 1>/dev/null
    else
        pgrep "$SERVER" 1>/dev/null
    fi
}

server_run()
{
    if [ "$EDITOR" = "emacs" ]; then
        "$SERVER_EXE" --daemon
    else
        nohup "$SERVER_EXE" -d -s $MAIN_KAK_SESSION 1>/dev/null 2>&1
    fi
}

call_editor()
{
    if [ "$EDITOR" = "emacs" ]; then
        set +e
        "$@"
        while [ $? -ne 0 ]; do
            sleep 0.1
            "$@"
        done
        set -e
    else
        "$@"
    fi
}

CMD=()

if ! server_running ; then
    server_run
fi

CMD+=("$CLIENT_EXE")
if [ "$EDITOR" = "emacs" ]; then
    CMD+=("-c") # --create-frame
else
    CMD+=("-c") # session ID
    CMD+=("$MAIN_KAK_SESSION")
fi

if [ "$EDITOR" = "emacs" ]; then
    if [ "$WAIT" != "true" ]; then
        CMD+=("--no-wait")
    fi

    if [ "$DIFF" = "true" ]; then
        # process all command line arguments and as a result fill in $LISP_CMD:
        LISP_CMD="(ediff-files"
        for arg in "${ARGS[@]}" ; do
            LISP_CMD="$LISP_CMD \"$arg\""
        done
        LISP_CMD="$LISP_CMD)"
        call_editor "${CMD[@]}" --eval "$LISP_CMD"
        exit
    fi
else
    # assume "$EDITOR" = "kak"
    if [ "$DIFF" = "true" ]; then
        echo "error: diff not supported by kak" 1>&2
        exit 1
    fi
fi

is_a_number()
{
    local NUMBER_TO_CHECK="$1"
    echo "$NUMBER_TO_CHECK" | grep -q '^[0-9]\+$'
    return $?
}

open_file()
{
    if [ "$EDITOR" = "emacs" ]; then
        call_editor "${CMD[@]}" --eval "(find-file \"$arg\")"
    else
        # assume $EDITOR = "kak"
        call_editor "${CMD[@]}" "$arg"
    fi
}

if [ ${#ARGS[@]} -eq 0 ]; then
    call_editor "${CMD[@]}"
    exit 0
fi

# process all command line arguments and as a result fill in $CMD:
for arg in "${ARGS[@]}" ; do
    line="$(echo "$arg" | cut -d':' -f2)"
    if [ "$line" = "$arg" ] ; then
        open_file
        continue
    fi
    if ! is_a_number "$line" ; then
        open_file
        continue
    fi
    column="$(echo "$arg" | cut -d':' -f3)"
    if [ -z "$column" ]; then # if no column has been specified
        column=1 # then assume it equals to 1
    fi
    if ! is_a_number "$column" ; then
        open_file
        continue
    fi
    file="$(echo "$arg" | cut -d':' -f1)"

    if [ "$EDITOR" = "emacs" ]; then
        call_editor "${CMD[@]}" --eval "(progn (find-file \"$file\") (evil-goto-line $line) (compilation-move-to-column $column nil))"
    else
        call_editor "${CMD[@]}" +$line:$column "$file"
    fi
done
