#!/bin/bash

WINDOWS=false
if [ -n "$WINDIR" ]; then
    WINDOWS=true
fi

# exec "C:/Program Files/SlickEdit Pro 20.0.0/win/vs.exe" $@

ARGS=()
for arg in "$@" ; do
    case "$arg" in
        "--diff") DIFF=true ;;
        *) ARGS+=("$arg") ;;
    esac
done

if [ $WINDOWS = false ]; then
    ID=$(id -u)
    if [ $ID -eq 0 ]; then
        USE_VIM=true
    fi
    if [ -z "$DISPLAY" ]; then
        USE_VIM=true
    fi
    # USE_VIM=true
    # USE_KAK=true
    MAIN_KAK_SESSION=main_kak_session
    if [ "$USE_VIM" = "true" ]; then
        ARGS_TMP=()
        if [ "$DIFF" = "true" ]; then
            ARGS_TMP+=("-d")
        else
            ARGS_TMP+=("-p")
        fi
        for arg in "${ARGS[@]}" ; do
            if [ "$arg" != "--wait" ] && [ "$arg" != "--diff" ]; then
                ARGS_TMP+=("$arg")
            fi
        done
        ARGS=("${ARGS_TMP[@]}")
        exec nvim "${ARGS[@]}"
    fi

    EMACS_PREFIX=""
    EMACS_SUFFIX=""
else
    EMACS_PREFIX="C:/files/other_files/emacs-25.3_1-x86_64/bin/"
    EMACS_SUFFIX=".exe"
fi

if [ "$USE_KAK" != "true" ]; then
    USE_EMACS=true
fi

daemon_running()
{
    if [ $WINDOWS = true ]; then
        tasklist | grep -q emacs 1>/dev/null
    else
        if [ "$USE_EMACS" = "true" ]; then
            pgrep emacs 1>/dev/null
        else
            pgrep kak 1>/dev/null
        fi
    fi
}

daemon_run()
{
    if [ "$USE_EMACS" = "true" ]; then
        if [ $WINDOWS = true ]; then
            DAEMON_EXE="${EMACS_PREFIX}runemacs.exe"
        else
            DAEMON_EXE=emacs
        fi
        $DAEMON_EXE --daemon
    else
        nohup kak -d -s $MAIN_KAK_SESSION 1>/dev/null 2>&1
    fi
}

call_editor()
{
    if [ "$USE_EMACS" = "true" ]; then
        set +e
        "$@"
        while [ $? -ne 0 ]; do
            sleep 0.1
            "$@"
        done
        set -e
    else
        "$@"
    fi
}

CMD=()

if ! daemon_running ; then
    daemon_run
fi
if [ "$USE_EMACS" = "true" ]; then
    CMD+=("${EMACS_PREFIX}emacsclient${EMACS_SUFFIX}") # see also emacsclientw
    CMD+=("-c") # --create-frame
else
    CMD+=("kak")
    CMD+=("-c")
    CMD+=("$MAIN_KAK_SESSION")
fi

# "--wait" is my own argument.
# "--nofork" is an argument, accepted by vim
# (it is called with it from vifm when renaming a file/folder).
# "-f" is an argument, accepted by vim ("foreground": do not fork).
ARGS_TMP=()
for arg in "${ARGS[@]}" ; do
    if [ "$arg" = "--wait" ] || [ "$arg" = "--nofork" ] || [ "$arg" = "-f" ]; then
        WAIT=true
    else
        ARGS_TMP+=("$arg")
    fi
done
ARGS=("${ARGS_TMP[@]}")
if [ "$USE_EMACS" = "true" ]; then
    if [ "$WAIT" != "true" ]; then
        CMD+=("--no-wait")
    fi

    if [ "$DIFF" = "true" ]; then
        # process all command line arguments and as a result fill in $LISP_CMD:
        LISP_CMD="(ediff-files"
        for arg in "${ARGS[@]}" ; do
            LISP_CMD="$LISP_CMD \"$arg\""
        done
        LISP_CMD="$LISP_CMD)"
        call_editor "${CMD[@]}" --eval "$LISP_CMD"
        exit
    fi
else
    # assume "$USE_KAK" = "true"
    if [ "$DIFF" = "true" ]; then
        echo "error: diff not supported by kak" 1>&2
        exit 1
    fi
fi

is_a_number()
{
    local NUMBER_TO_CHECK="$1"
    echo "$NUMBER_TO_CHECK" | grep -q '^[0-9]\+$'
    return $?
}

open_file()
{
    if [ "$USE_EMACS" = "true" ]; then
        call_editor "${CMD[@]}" --eval "(find-file \"$arg\")"
    else
        # assume $USE_KAK = "true"
        call_editor "${CMD[@]}" "$arg"
    fi
}

if [ ${#ARGS[@]} -eq 0 ]; then
    call_editor "${CMD[@]}"
    exit 0
fi

# process all command line arguments and as a result fill in $CMD:
for arg in "${ARGS[@]}" ; do
    line="$(echo "$arg" | cut -d':' -f2)"
    if [ "$line" = "$arg" ] ; then
        open_file
        continue
    fi
    if ! is_a_number "$line" ; then
        open_file
        continue
    fi
    column="$(echo "$arg" | cut -d':' -f3)"
    if [ -z "$column" ]; then # if no column has been specified
        column=1 # then assume it equals to 1
    fi
    if ! is_a_number "$column" ; then
        open_file
        continue
    fi
    file="$(echo "$arg" | cut -d':' -f1)"

    if [ "$USE_EMACS" = "true" ]; then
        call_editor "${CMD[@]}" --eval "(progn (find-file \"$file\") (evil-goto-line $line) (compilation-move-to-column $column nil))"
    else
        call_editor "${CMD[@]}" +$line:$column "$file"
    fi
done
