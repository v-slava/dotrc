# Uboot commands (press any key at early boot stage to enter uboot console):
help
help CMD
printenv
printenv -a
setenv ARG "VALUE"
saveenv
reset

# Google test (gtest) test filter:
./test_executable --gtest_filter='PREFIX_1*:PREFIX_2*:PREFIX_3*'

# View open ports (a), PIDs (p), do not resolve hosts (n). Try also as root:
netstat -apn

# Audio CD is can't be mounted.
# Listen track #1 from audio CD:
mplayer -cdrom-device /dev/cdrom -cache 5000 cdda://1
# Determine number of audio tracks:
udevadm info /dev/cdrom | grep ID_CDROM_MEDIA_TRACK_COUNT
# Extract all audio tracks in mp3 format from audio cd:
apt-get install abcde eyed3
abcde -o mp3

# Print file capabilities:
getcap FILE
# Add capabilities to a file:
setcap 'cap_sys_rawio+ep' FILE

# Print properties of window (find PID by clicking):
xprop

# Icecream:
sudo apt-get install icecc icecc-monitor
# kill icecc-scheduler, if present
sudo service iceccd restart
# create symlinks "clang" and "clang++" in "/usr/lib/icecc/bin"
cd $HOME/other/toolchains/icecc
/usr/lib/icecc/icecc-create-env --gcc /usr/bin/gcc /usr/bin/g++
/usr/lib/icecc/icecc-create-env --clang /usr/bin/clang /usr/bin/clang++
# Icecream GUI monitor:
icemon
# for environment settings see .bashrc

# Show which packages can be upgraded from backports:
apt-get -s -t jessie-backports dist-upgrade

# install package from backports:
apt-get -t jessie-backports install PACKAGE

# install package of specified version:
apt-get install PACKAGE=VERSION

# Debian packaging from source:
# Debian download source package:
apt-get source PACKAGE
Got sources with patches applied.

# Install build dependencies:
apt-get build-dep PACKAGE

# Clear out the local repository of retrieved package files:
apt-get clean

# Show dependencies to be installed for a package:
apt-get install -s <package_name>
apt-rdepends --state-show NotInstalled --state-follow NotInstalled <package_name>
# Show reverse dependencies:
apt-cache rdepends <package_name>

# Download sources for a package:
apt-get source --download-only <package_name>

# Download package from repository:
apt-get download <package_name>

# list installed packages by installation date:
ls -lt /var/lib/dpkg/info/*.list | cut -d' ' -f 5-

# dpkg restore broken installation:
dpkg --configure -a

# dpkg apt-get add architecture x86-64 x86_64:
sudo dpkg --add-architecture <arch>
dpkg --print-foreign-architectures
sudo apt-get update
dpkg --remove-architecture <arch>

# Build package from source and do not sign anything:
dpkg-buildpackage -us -uc
# View build flags:
dpkg-buildflags
# Use -O0 instead of -O2:
export DEB_BUILD_OPTIONS=noopt

# Install package without root privileges:
mkdir -p ~/root_dir/var/lib
cp -r /var/lib/dpkg ~/root_dir/var/lib/
dpkg --force-not-root --root=$HOME/root_dir --log=$HOME/var_log_dpkg.log -i <package_name>

# Show files in package:
apt-file list <package_name_from_repository>
dpkg -L <installed_package_name>
dpkg -c <package>.deb

# Extract files from package:
ar xv <package>.deb

# Search for a file from installed packages:
dpkg -S FILE

# Find all packages that provide www-browser:
aptitude search '~Pwww-browser'

# Switch to russian language (add to ~/.bashrc):
export LANG=ru_RU.UTF-8
export LANGUAGE=ru
# See also /etc/default/locale

# Setup desktop wallpaper (i3wm):
feh --bg-center ~/os_settings/other_files/desktop_wallpaper.png

# Convert elf to binary:
objcopy -O binary IN_FILE.elf OUT_FILE.bin
# List targets, acceptable by objcopy:
objdump -i
# Dump single section into binary from object file:
arm-none-eabi-objcopy --only-section=.MySection -I elf32-littlearm -O binary IN_FILE.o OUT_FILE.bin

# Pulseaudio verbose output:
pulseaudio -k && pulseaudio -vvvv
# Do not respawn pulseaudio: in file /etc/pulse/client.conf
autospawn = yes
# Get list of sound cards:
pacmd list-cards
# Get current card's active profile (bluetooth):
pacmd list-cards | grep 'active profile'
# Change current card's active profile (bluetooth):
pactl set-card-profile CARD_INDEX PROFILE_NAME
# Get list of output devices (speaker, ...):
pactl list sinks
# Get list of input devices (microphone):
pactl list sources
# Get list of application producing sound:
pacmd list-sink-inputs

# i3wm turn off monitor (move workspaces to LVDS1):
xrandr --output HDMI1 --off

# Set setuid bit in order to dump packages as non-root user
# (this doesn't work for usb dumping with dumpcap):
chmod u+s /usr/sbin/tcpdump
# Enable USB monitoring:
su -c 'modprobe usbmon'
# Dump packets and feed them to wireshark through unnamed pipe:
tcpdump -i usbmon1 -w - -U | wireshark -k -i -

# List interfaces available:
dumpcap -D
# Dump packets to file:
dumpcap -i eth0 -w FILE
# Display captured packets from file:
wireshark -r FILE
# Dump packets to stdout:
dumpcap -i eth0 -w -
# Dump packets and feed them to wireshark through unnamed pipe
# (doesn't work for usb unless you are root, setuid doesn't help):
dumpcap -i eth0 -w - -P | wireshark -k -i -

# read the whole content of the chip flash:
edbg -t atmel_cm7 -r -f full_flash.bin
# erase flash memory:
edbg -t atmel_cm7 -e
# write binary to flash memory:
edbg -t atmel_cm7 -bpv -f some_flash.bin

# gtypist in russian:
gtypist ru.typ

# Search only in files, that match regex:
ag SEARCH_REGEX -G FILE_PATH_REGEX
# Search only in *.h and *.cpp files:
ag SEARCH_REGEX -G '(\.h$|\.cpp)'
# Search only in *.cpp files, which path contains "tools":
ag SEARCH_REGEX -G '(?=.*tools)(?=.*\.cpp$)'

# smplayer hotkeys:
j - loop subtitle (e.g. none, rus, eng, ...)
v - switch subtitle visibility
a - change aspect ratio

# Compose key sequences (not works for some apps):
# 1) add the following contents:
# <Multi_key> <a> : "ä"
# <Multi_key> <b> <r> : "Best regards," # email ending
# to file '/usr/share/X11/locale/en_US.UTF-8/Compose'
# 2) set Alt_R as compose key:
xmodmap -e 'keycode 108 = Multi_key'
# 3) press sequentially <Caps_lock>, <a> to produce <ä>

# Use Mode_switch to type characters from alternative keyboard:
xmodmap -e 'keycode 108 = Mode_switch'
# Press Alt_R+s to produce 'ы'
# See xmodmap -pke for symbols assigned

# Verbose linking (linker: print linker script, linked objects, libraries, etc.):
gcc 1.o 2.o -o out.elf -Wl,--verbose

# Create static executable with rust:
# 1. Emit object file:
rustc -O --emit obj main.rs
# 2. Print linker arguments:
rustc -O -Z print-link-args main.rs
# Use printed link command with the following modifications:
# 1) add "-static", "-static-libgcc"
# 2) change "gcc_s" => "gcc_eh"
# 3) delete "-pie", "-Wl,-Bdynamic"

# get line with specified number from file:
sed -n '<line number>p' < file

# Delete specified lines interval from file:
sed -i OLD_FILE -e '<start line>,<end line>d'

# Insert specified line into text file under a given line number:
sed -i OLD_FILE -e '<line number>i<text to be inserted>'
# A line, which is currently under <line number> will be
# under <line number>+1 after execution.

# Replace string by regex:
cat file_before | sed -e 's/REGEX/STRING_AFTER/g' > file_after

# Delete strings by regex:`
cat file_before | sed -e '/REGEX/d' > file_after

# Disable GNU Make builtin rules:
MAKEFLAGS += --no-builtin-rules --no-builtin-variables --no-print-directory
export MAKEFLAGS
# .SUFFIXES:

# get Makefile directory in Makefile:
MAKEFILE_DIR := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))

# Debug Makefile:
make -d
make -p
# Variables "V" or "VERBOSE" are normally analysed by Makefiles:
make V=1
make VERBOSE=1
# Create linux man pages (docs):
make mandocs
make installmandocs # installs in /usr/local/man/man9
# Get info about all targets (linux kernel only):
make help

# gcc output rules for make describing dependencies:
gcc FILE.c -o FILE.d -MM -MT FILE.o
# In Makefile:
-include FILE.d

# Exclude an option from variable in Makefile:
OPTS += SomeOption
OPTS := $(filter-out SomeOption,$(OPTS))

# Cmake: generate project for eclipse:
cmake -G"Eclipse CDT4 - Unix Makefiles" -D CMAKE_BUILD_TYPE=Debug ../cmake_demo

# Specify install directory for cmake:
cmake -DCMAKE_INSTALL_PREFIX=.. ../src_dir

# create JSON file with build commands, used by clang tooling interface (rtags):
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1
bear make
# need additional processing:
ninja -v
ninja -t commands
make VERBOSE=1

# Start rtags daemon (custom toolchain):
rdm -R

# enable failures in libc via LD_PRELOAD (fiu):
fiu-run -x -c 'enable name=posix/io/*' ls

# C++ hex output format example:
std::cout << std::hex << std::setfill('0') << std::nouppercase << std::setw(8);

# list available fonts:
fc-list

# update fonts cache:
fc-cache -fv

# cut pages range from pdf:
pdftk A=in_1.pdf input_pw='PASSWORD' B=in_2.pdf cat A3-5 B3left A2right output out.pdf
# Create pdf file from images (jpg/png):
convert page*.png mydoc.pdf

# Set the pipeline's return status to the value of the  last  (right‐most)
# command to exit with a non-zero status, or zero if all commands exit
# successfully:
set -o pipefail

# icedove / thunderbird:
# see ~/other/icedove_thunderbird
# use firetray addon
http://forums.mozillazine.org/viewtopic.php?f=48&t=72994
http://mozilla.dorando.at/keyconfig.xpi
# See file .icedove/PROFILE/mimeTypes.rdf for default browser

# Determine unit tests coverage:
gcc UNIT_TESTS.c -o UNIT_TESTS.out --coverage
gcov UNIT_TESTS.out

# Reformat source file with uncrustify:
uncrustify -f FILE_BEFORE.c -o FILE_AFTER.c

# Use valgrind for dynamic memory analysis:
valgrind --leak-check=full --track-origins=yes EXECUTABLE.out

# Use clang static analysis:
scan-build BUILD_COMMAND
# List some clang command line options:
clang++ -cc1 --help
# List scan-build default checkers:
scan-build --help-checkers
# List all available analyzers:
clang++ -cc1 -analyzer-checker-help
# Use one specific analyzer:
clang++ -cc1 -analyze -analyzer-checker=core.DivideZero FILE.cpp
# Verbose scan-build execution:
scan-build -v -v -v BUILD_COMMAND

# Find *.c files only in specified path:
find -path './some/path*' -name '*.c

# Execute command for each element found:
find -exec CMD args_before {} args_after \;

# Find symbol in directory with libraries / object files:
find DIR -type f -name '*.a' | xargs nm -o | grep ' SYMBOL'

# Display symbols, exported by a shared library (even stripped one):
nm -D /path/to/libSOMETHING.so

# xargs specify parameters order (you can use anything as replace_str):
echo "stdin args" | xargs -I replace_str CMD args_before replace_str args_after

# xargs spaces (files with spaces, print size in bytes):
find -type f -print0 | xargs -0 du -b

# Pack initramfs:
cd EXTRACTED_INITRD && find | cpio -o -H newc | gzip -9 > /path/to/initramfs.igz

# Extract initramfs:
cd FOLDER_TO_EXTRACT_INTO && gunzip -c -9 /boot/initrd.img-3.11.0-12-generic | cpio -i -d -H newc --no-absolute-filenames

# Copy files over ssh:
ssh USER_NAME@$IP "tar cz --exclude=*.o -C /path/to dir" | pv > 1.tar.gz
ssh USER_NAME@$IP "cat FILE" | pv -s 1G > FILE

# View progress using coreutils viewer (cv, progress viewer):
progress -wm

# Compress folder by tar:
tar cf tar_name.tar ./source_directory/*
tar czf archive.tar.gz /path/to/directory

#pragma pack(push, 1)
#pragma pack(pop)

# assert.h : assert() -DNDEBUG to turn off

# Signal bash to include filenames beginning with a `.'
# in the results of pathname expansion:
shopt -s dotglob

# View bluetoothctl commands:
echo help | bluetoothctl

# pactl -- set-sink-volume 2 +3%

# sound application (output):
pacmd list-sink-inputs

# if no sound:
$ LANGUAGE=en pacmd list-sinks | grep -i mute
       muted: yes
$ pacmd list-sinks | grep -i index
  * index: 0
$ pacmd set-sink-mute INDEX 0

# sound outputs:
pacmd list-sinks
# index 0 (ports: analog-output-speaker, analog-output-headphones)
# index 1 (bluetooth headset)

# Change port for sink 0:
pactl set-sink-port 0 analog-output-headphones
pactl set-sink-port 0 analog-output-speaker

# volume control (per-sink):
pactl -- set-sink-volume INDEX +3%

# get volume:
LANGUAGE=en pactl list sinks | grep 'Volume: front' | cut -d' ' -f6

# Set time 3 hours back:
date -s "$(date -R -d '-3 hour')"
hwclock -w

# Set timezone (EET = Eastern European Time = UTC+2):
ln -s /usr/share/zoneinfo/Europe/Kiev /etc/localtime

# View timezone:
date +%Z

# View systemd log (from root):
journalctl

# Recursively show control group contents:
systemd-cgls

# Systemd commands:
systemctl is-enabled SERVICE
systemctl status SERVICE
systemctl enable SERVICE
systemctl start SERVICE
systemctl set-default multi-user.target
# target example: /usr/lib/systemd/system/graphical.target

# Connect manually to wifi (wpasupplicant):
wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/my_wpa_supplicant.conf

# LG G2 path to camera photos:
/storage/emulated/legacy/DCIM/Camera/

# Download video from youtube:
cclive -f best URL

# Bluetooth headset alsa:
# /etc/bluetooth/audio.conf:
[General]
Enable=Socket

# cat << EOF >> ~/.asoundrc
pcm.btheadset {
	type plug
	slave {
		pcm {
			type bluetooth
			device "34:DF:2A:07:71:E8"
			profile "auto"
		}
	}

	hint {
		show on
		description "BT Headset"
	}
}

ctl.btheadset {
	type bluetooth
}
# EOF

# Scan for bluetooth devices:
hcitool scan

# On first connect to enter PIN:
bluez-simple-agent hci0 MAC

# Connect to bluetooth headset:
bt-audio -c MAC

# Display active baseband connections:
hcitool con

# Play mp3:
mplayer -ao alsa:device=btheadset file.mp3

# USB flash turn write protection off:
hdparm -R0 /dev/sdX
hdparm -r0 /dev/sdX

# neovim (nvim) for pair programming:
# #1:
NVIM_LISTEN_ADDRESS=127.0.0.1:6666 nvim --headless
nvim-qt --server 127.0.0.1:7777
# #2:
NVIM_LISTEN_ADDRESS=/tmp/nvimsocket nvim -u ~/.vimrc --embed
nvim-qt --server /tmp/nvimsocket

# Read korean text (locale):
apt-get install fonts-baekmuk
LANG=ko_KR.EUC-KR gvim file.cpp

# Generate SSH keys:
ssh-keygen -t rsa -C "user@email.com"
# Add authorization without password:
ssh-copy-id user@hostname
cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys

# check signature:
gpg --verify FILE.sig FILE
# If got "Can't check signature: public key not found", use:
gpg --recv-keys KEY_ID

# gpg view supported ciphers:
gpg --version
# gpg encrypt file:
gpg --symmetric --cipher-algo AES256 FILE
# gpg decrypt file:
gpg --decrypt FILE > OUT_FILE

# Use doxygen to generate documentation:
cd OUTPUT_FOLDER
# generate sample Doxyfile:
doxygen -g
# fix Doxyfile (see the following options):
# PROJECT_NAME INPUT RECURSIVE SOURCE_BROWSER INLINE_SOURCES
# STRIP_CODE_COMMENTS GENERATE_LATEX GENERATE_DOCBOOK HAVE_DOT CALL_GRAPH
# CALLER_GRAPH CLASS_GRAPH EXTRACT_ALL EXTRACT_STATIC REFERENCED_BY_RELATION
# REFERENCED_RELATION MACRO_EXPANSION SKIP_FUNCTION_MACROS
vim Doxyfile
# generate documentation:
doxygen
# view generated documentation:
firefox html/index.html

# OpenGL: use software rendering:
LIBGL_ALWAYS_SOFTWARE=1 glxinfo

# Display the whole server certificate chain:
openssl s_client -showcerts -connect developer.mozilla.org:443 </dev/null

# view certificate revocation list:
openssl crl -text -inform {DER|PEM} FILE.crl

# view certificate details:
openssl x509 -text -in CERTIFICATE_FILE

# Add certificate:
cp certificate.crt /usr/share/ca-certificates/
sudo dpkg-reconfigure ca-certificates
# see also folder /etc/ssl/certs

# Scan network for NetBIOS name information (with IP):
nbtscan 192.168.2.3/16

# Mount folder over SSH:
sshfs -o allow_root,nonempty user_name@server_name_or_IP:/folder/to/mount /mount/point

# List samba services available on server:
smbclient -U USER_NAME[%PASSWORD] -W DOMAIN -L SERVER
# mount smb share with cifs-utils with separate credentials file:
mount -t cifs -o credentials=/file/with/smb_credentials //server_name/share_name /mount/point
# Create file with smb credentials:
cat << EOF > /file/with/smb_credentials
username=SomeUserName
password=SomePassword
EOF
# mount smb share with cifs-utils without separate credentials file:
mount -t cifs -o username=SomeUserName,password=SomePassword,domain=SomeDomain //server_name/share_name /mount/point
# See also mount shared folder via smb (package=smbnetfs|fusesmb, no root required)

# Restart nfs server (ubuntu):
sudo service nfs-kernel-server restart
# sudo vim /etc/exports:
# /mnt_folder 192.168.1.1(rw,sync,no_root_squash,no_subtree_check)
# /mnt_folder *(rw,sync,no_root_squash,no_subtree_check)

# View machines, connected via ssh:
who -a

# register foreign (x86-64 elf files) binary format:
echo ':qemu-x86_64:M:0:\x7F\x45\x4C\x46\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x3E\x00:\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF:/usr/bin/qemu-x86_64:OC' > /proc/sys/fs/binfmt_misc/register

# register foreign (arm elf files) binary format:
echo ':qemu-arm:M:0:\x7f\x45\x4c\x46\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-arm:OC' > /proc/sys/fs/binfmt_misc/register

# Simulate root access via LD_PRELOAD:
fakeroot id
echo "id ; whoami" | fakeroot
# Create tarball for variant=fakechroot (use variant=minbase without fakechroot):
fakechroot debootstrap --arch=armhf --download-only --variant=fakechroot \
	--make-tarball=debootstrap.tgz wheezy tmp_dir
# If tmp_dir doesn't exist - it will be created. It will be deleted at the end.
# Unpack tarball for foreign architecture:
fakeroot debootstrap --arch=armhf --foreign --unpack-tarball=debootstrap.tgz wheezy mnt
# Download and install (first stage only):
fakeroot debootstrap --arch=armhf --foreign wheezy mnt
# Chroot without root privileges:
fakechroot chroot root_dir
fakechroot chroot root_dir CMD
echo "CMD1 ; CMD2" | fakechroot chroot root_dir
# Transparent cross-compilation (your cross-compiler will be accessed via /usr/bin/gcc):
# Initialize a target (need to be executed just once, TARGET may be any string):
sb2-init -d -n TARGET CROSS_COMPILER
sb2 # -eR # Enter scratchbox environment
fakeroot debootstrap --arch=armhf --foreign --variant=scratchbox wheezy DIR
# Here DIR is a directory you've executed sb2-init in (be carefull with symlinks).
# Chroot to foreign architecture rootfs:
cp /usr/bin/qemu-arm-static root_dir/usr/bin
sudo chroot root_dir
# Note: there might be issues with fakechroot-ing to foreign architecture.

# Generate password for /etc/passwd:
openssl passwd -1 -salt my_salt my_password
echo 'my_password' | mkpasswd --salt=MyLongSalt --method=sha-512 -s
# Exact line in /etc/passwd:
root:OUTPUT_FROM_PREVIOUS_CMD:0:0:Root,,,:/:/bin/sh

# View current kernel config:
zcat /proc/config.gz

# debug printk:
pr_devel() should produce zero code unless DEBUG is defined
# printk(KERN_DEBUG "fmt", ...)
# For dynamic debugging:
pr_debug(char *format, ...);
# If you are writing a driver, please use dev_dbg instead
dev_dbg(struct device *dev, char *format, ...);

# Unset environment variable (bash):
unset ENV_VAR_NAME

# Truncate file:
truncate -s SIZE FILE

# View file sizes (right one is apparent size = including holes):
ls -lsh FILE
ls -ls --block-size=1 FILE

# Resize ext2/3/4 partition:
resize2fs -p FILE [SIZE]

# Check filesystem for errors (do not correct anything):
fsck.reiserfs -n FILE

# Do not reserve 5% of space on file system:
mkfs -t ext4 -m 0 -L files_partition /dev/sdX1
tune2fs -m 0 FILE

# To apply patches manually:
1. Copy debian folder to original sources
2. export QUILT_PATCHES=debian/patches
3. cd original_sources_root_folder && quilt push -a

# To unapply debian patches (see also quilt applied/unapplied):
quilt pop -a

# Manual patching (according to order in "series" file):
patch --no-backup-if-mismatch -p1 < $SOME_PATH_PREFIX/debian/patches/PATCH_NAME.patch

# To generate package description file (.dsc):
(needed: root/PACKAGE_ROOT/debian, root/original_sources.tar.*):
cd root && dpkg-source -b PACKAGE_ROOT

# Create patch file (use diff -uNr for directories):
diff -uN old_file new_file > patch_file

# Apply patch:
patch old_file patch_file
cd destination_dir && patch -p1 < ../patch_file
# Do not ask anything, do not create .orig and .rej files:
patch -f -r - --no-backup-if-mismatch old_file patch_file

# git delete remote branch (from remote repository):
git push REMOTE --delete BRANCH
git push REMOTE :BRANCH

# git repository as shared folder:
# Write:
git push -f REMOTE BRANCH
# Read:
git fetch REMOTE
git checkout -B BRANCH
git reset REMOTE/BRANCH --hard

# To revert branch from some commit, first find a commit in logs:
cat REPO_ROOT/.git/logs/refs/heads/*
# Create new branch pointing to this commit:
git checkout -b BRANCH_NAME SHA

# Show stash contents:
git stash show -p [stash@{1}]

# Create patch file:
git format-patch -1 [-o OUT_DIR]
# Apply patch file:
git apply PATCH_FILE
# Apply patch file and create commit based on it:
git am < PATCH_FILE

# git change author of commit:
git commit --amend --author "New Author Name <email@address.com>"

# create bundle:
git bundle create BUNDLE_FILE COMMIT_FROM..COMMIT_TO
# verify bundle:
git bundle verify BUNDLE_FILE
# view current remotes:
git remote [-v]
# add bundle as remote:
git remote add REMOTE_NAME BUNDLE_FILE
# delete remote:
git remote remove REMOTE_NAME
# fetch new remote:
git fetch REMOTE_NAME

# View branches tracking information:
git branch -vv
# Add tracking information to git branch:
git branch -u origin/remote_branch [local_branch]
# The same for git 1.7 (old):
git branch --set-upstream local_branch origin/remote_branch

# .gitignore file in .git folder:
.git/info/exclude

# do not track changes in commited file:
git update-index --assume-unchanged FILE

# push all except last commit to upstream:
git push origin HEAD~1:BRANCH

# Show all files, affected by a given commit:
git diff-tree --no-commit-id --name-only -r COMMIT
git show --name-only COMMIT
# Show changes introduced by a commit in a single given file:
git show COMMIT FILE

# Git do not verify ssl certificates:
git config [--global] http.sslVerify false
GIT_SSL_NO_VERIFY=true git clone URL
git -c http.sslVerify=false clone URL
# Git use custom certificate:
git config [--global] http.sslCAInfo FILE.cer
GIT_SSL_CAINFO=FILE.cer git clone URL
git -c http.sslCAInfo=FILE.cer clone URL

# Add all untracked files:
git add -A

# gerrit udpate commit (patch set):
git push origin HEAD:refs/changes/CHANGE_NUMBER

# Gerrit commit:
git push origin HEAD:refs/for/BRANCH_NAME

# Show changes in the cache/index (i.e. staged chenages) against the current HEAD:
git diff --name-only --cached

# Git amend not last commit:
git rebase --interactive bbc643cd^
# In the default editor, modify 'pick' to 'edit' in the line whose commit you want to modify
vim FILES_TO_MODIFY
git add FILES_TO_MODIFY
git commit --amend --no-edit
git rebase --continue

git log --graph --pretty=format:"%d %h %ai %an %s"
git log --graph --all --decorate

# rsync example:
rsync -avP --delete --exclude=.git/* --exclude=obj/* --exclude=*.opendb --exclude=.vs/* SRC_DIR DESTINATION_DIR

# Alsa sound recording (tee plugin):
aplay -v -Dtee:\'plughw:0,0\',./raw_samples_file,raw FILE.wav
# Alsa play recorded sound:
aplay -v -c 2 -f S16_LE -r 44100 ./raw_samples_file

# Play sound via specific sound device:
aplay -D hw:#CARD,#DEVICE,#SUBDEVICE FILE.wav

# Alsa commands:
cat /proc/asound/cards (modules, devices)
aplay -v file.wav

# Who uses file/folder:
fuser FILE
fuser -m FOLDER

# Show session IDs and process group IDs:
ps -eo sid,pgid,ppid,pid,comm

# Show all processes and threads:
ps -efL

# Show process hierarchy (forest):
ps -efH

# rpm print macro definition:
rpm --eval "%{_prefix}"

# List all filesystems, devices backed by them, mount points:
findmnt

# trace execve syscalls (including child processes):
strace -f -s 8192 -o trace_file -e trace=execve CMD
# attach to process and begin tracing:
strace -p PID

# P4 help:
p4 help COMMAND

# P4 changelist:
# P4 view changelists, integrated into specified file(s):
p4 changes -i REMOTE_FILE
p4 changes -i REMOTE_FOLDER/...

# P4 list of pending changelists:
p4 changes -s pending -u USER_NAME -c WORKSPACE_NAME

# P4 create new changelist:
cat CHANGELIST_DESCRIPTION_TXT | p4 change -i

# P4 edit existed changelist:
p4 change -O changelist#

# P4 view changelist:
p4 change -o
p4 change -o -O changelist#
p4 describe changelist#
p4 files @=changelist#

# P4 submit changelist:
p4 submit [-r -f] -c changelist#

# P4 delete changelist:
p4 change -d changelist#

# P4 workspace:
# P4 list all workspaces, owned by USER_NAME:
p4 clients -u USER_NAME

# P4 switch to a workspace:
export P4CLIENT=WORKSPACE_NAME

# P4 print current workspace settings:
p4 client -o

# P4 create workspace:
cat WORKSPACE_SETTINGS_TXT | p4 client -i

# P4 delete workspace:
p4 client -d WORKSPACE_NAME

# P4 get latest revision:
p4 sync
p4 sync -f //depot/path/to/folder/...#head

# P4 remove all files from workspace:
p4 sync /path/to/local/workspace/...#0

# P4 file/folder operations:
# P4 view opened files:
p4 opened
p4 opened -a

# P4 mark file for deletion:
p4 delete -c changelist# -v //depot/path/to/file

# P4 mark folder for deletion:
p4 delete -c changelist# -v //depot/path/to/folder/...

# P4 revert file:
p4 revert //depot/path/to/file

# P4 revert folder:
p4 revert //depot/path/to/folder/...

# P4 mark file for add:
p4 add -c changelist# /path/to/local/file

# P4 mark folder for add:
p4 add -c changelist# '/path/to/local/folder/*'

# P4 mark file for edit (checkout):
p4 edit -c changelist# /path/to/local/file

# P4 mark folder for edit (checkout):
p4 edit -c changelist# /path/to/folder/...

# P4 rename file:
p4 edit -c changelist# /path/to/local/file/before
p4 move /path/to/local/file/before /path/to/local/file/after
In changelist:
	//depot/path/to/remote/file/before	# move/delete
	//depot/path/to/remote/file/after	# move/add

# Output lines [K; L]
tail -n +K | head -n {L - K + 1}

# Output lines [1; K]
head -n K

# Output lines [K; EOF)
tail -n +K

# Documentation browser: zeal (depends on latest qt5)

# Man pages local path:
/usr/share/man
# Find a package, MAN_PAGE belongs to:
apt-file search -x 'man[0-9]/MAN_PAGE.*\.gz'

# Search man pages description for keyword:
apropos KEYWORD
man -k KEYWORD

# Search man pages contents for keyword:
man -K -w KEYWORD

# generate password for linux:
openssl passwd -1 -salt xyz yourpass
# -1  Use the MD5 based BSD password algorithm 1.

# man for openssl command (enc, passwd, ...):
man 1ssl cmd

# Qemu monitor:
qemu-system-arm -monitor pty
> pid 23969's current affinity mask: ff
> pid 23969's new affinity mask: 1
> char device redirected to /dev/pts/4 (label compat_monitor0)
screen /dev/pts/4
minicom -p /dev/pts/4

# Connect to serial port:
sudo minicom -D /dev/ttyUSB0

# minicom configuration:
<ctrl>+A <pause> O  -> serial port setup -> hardware flow control
(set to Novia "F" key)
than go to main menu, select "Save setup as dfl"

# Start screen:
screen /dev/ttyUSB0 115200N1

# Detach from screen:
<ctrl>a + d

# Create new screen session or attach to existing ones (if present):
screen -d -R

# Exit from screen:
<ctrl>a + :quit

# QEMU save memory:
pmemsave <address> <size> <file>

# Qemu interaction:
<Ctrl> + A     <pause>     H

# Exit qemu:
<Ctrl> + A     <pause>     X

# Switch to qemu's console:
<Ctrl> + A     <pause>     C

# Run arm executable using qemu-arm:
sudo apt-get install gcc-4.7-arm-linux-gnueabi # arm cross compiler
sudo apt-get install libc6-dev-armel-cross # arm C library development files
arm-linux-gnueabi-gcc -static 1.c
qemu-arm a.out

# Extract .jar file (java library):
jar xf FILE.jar

# Disassemble .class file (java):
javap -p FILE.class

# Measure disk speed:
sudo hdparm -t DEVICE

# Install nfs server:
sudo apt-get install nfs-kernel-server
# Rootfs via nfs - kernel cmdline options:
KERNEL_CMDLINE:root=/dev/nfs nfsroot=192.168.1.1:/path/to/rootfs_mnt rw ip=dhcp console=ttyS0,115200n8 sdp_hwaddr=SOME_MAC
# Restart nfs service:
service nfs-kernel-server restart
# nfs server config (/etc/exports):
/path/to/rootfs_mnt *(rw,sync,no_root_squash,no_subtree_check)

# All info elf:
readelf -a FILE

# Show video mode resolution ModeLine:
xvidtune -show

# Display total size of current directory:
du -h -s
# Display size of each direcory inside current ones:
du -h -d 1

# Mount usb so that all users can write to it:
su -c 'mount -ouser,umask=0000,exec /dev/sdb1 /media/USB'

# Show dmesg log:
tail -F /var/log/messages

# preprocess bash script:
#!/bin/bash -x
# in "help set":
# -x  Print commands and their arguments as they are executed.
bash -x ./some_script.sh 2>&1 1>/dev/null | grep '^+ ' | cut -c 3-

# Preprocess source file for further compilation:
gcc FILE.c -o FILE.i -E -P -dN
# (see -dCHARS in "man gcc")

# gcc save preprocessed and assembler files:
gcc -save-temps=obj

# Standard compiler include search paths:
touch foo.h && gcc -c -v foo.h

# Standard compiler macros (preprocessor):
gcc -dM -E - < /dev/null

# Replace symbol (space in this case) witn \n:
cat FILE_BEFORE | tr ' ' '\n' > FILE_AFTER

# Print keymap table:
xmodmap -pk
xmodmap -pke

# map Escape to CapsLock:
xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape'

# Use setxkbmap to remap keys:
setxkbmap -option OPT
# Where OPT can be:
caps:none          # Disables Caps Lock.
caps:super         # Caps Lock becomes an additional Super (aka Win key).
caps:ctrl_modifier # Caps Lock becomes an additional Ctrl.
caps:numlock       # Caps Lock becomes an additional Num Lock.
caps:escape        # Caps Lock becomes an additional Escape.
caps:backspace     # Caps Lock becomes an additional Backspace.
caps:swapescape    # Caps Lock becomes Escape, and Escape becomes Caps Lock

# Print contents of X events (and keyboard codes):
xev

# To inspect bash keyboard mapping:
bind -P

# Vim delete empty lines:
:%g/^\s*$/d

# Vim delete lines by regex:
:%g/<regex>/d

# Canonicalize PATH:
readlink -f PATH
realpath PATH

# Create uImage from raw binary:
mkimage -A arm -O linux -T kernel -C none -a 0x80008000 -e 0x80008000 -n Linux-3.8.13+ -d print_hw_features.bin uImage

# Create hard drive image in regular file:
fdisk FILE
kpartx -a FILE # add partition mappings
losetup -l # print info about loop devices
mount /dev/mapper/loop0p1 /mnt # mount first partition from FILE to /mnt
kpartx -d FILE # delete partition mappings
# losetup -f # print name of first unused loop device (for example /dev/loop0)
# losetup -o OFFSET /dev/loop0 FILE # attach loop device with regular file
# losetup -d /dev/loop0 # detach loop device from file

# Convert raw framebuffer data to png image:
ffmpeg -vcodec rawvideo -f rawvideo -pix_fmt rgb32 -s 1920x1080 -i FRAMEBUFFER.DUMP -f image2 -vcodec png framebuffer.png

# Start logging bash session:
script IN_OUT_LOG_FILE -t 2>TIMING_LOG_FILE

# Read logging bash session:
scriptreplay -t TIMINT_LOG_FILE IN_OUT_LOG_FILE
cat <file_name>
less -r|-R IN_OUT_LOG_FILE

# less search command line:
less -p pattern FILE

# get timestamp
ls -l --time-style=+%s <FILE | FOLDER> | cut -d' ' -f 6

# Get squashfs compression algorithm:
unsquashfs -s rootfs.img | grep Compression

# grep recursively by file extension:
grep -R --include=*.cpp --include=*.h --exclude=*.inl.h <pattern> .

# Show only file names with matched content:
grep -rl -m 1 'REGEX' .

# Check debug info (debug symbols, debug sections) in elf:
readelf --sections FILE | grep debug
# Without debug info output is empty. With debug info output looks like:
# [27] .debug_aranges    PROGBITS        00000000 001071 000020 00      0   0  1
# [28] .debug_info       PROGBITS        00000000 001091 000042 00      0   0  1
# [29] .debug_abbrev     PROGBITS        00000000 0010d3 000037 00      0   0  1
# [30] .debug_line       PROGBITS        00000000 00110a 000038 00      0   0  1
# [31] .debug_str        PROGBITS        00000000 001142 000063 01  MS  0   0  1

# Dynamic dependencies (shared libraries):
readelf -d FILE | grep NEEDED
objdump -p FILE | grep NEEDED
ldd FILE # doesn't work for other architecture (always returns not a dynamic executable)
LD_TRACE_LOADED_OBJECTS=1 /lib/ld-linux.so.3 FILE

# 7z decompressing:
7z x FILE.7z
p7zip -d FILE.7z

# 7z compressing:
7z a FILE.7z /path/to/folder
7z a -t7z -v89m -mx0 -r FILE.7z /path/to/folder

# Determine sectors occupied by a given file:
sudo hdparm --fibmap FILE

# View dot files:
xdot file.dot (or better file.gv)

# Trace32 commands:
break.set 0x12345678
data.load.elf <elf file> /nocode
data.load.binary <binary file> 0x12345678
data.dump 0x12345678
break.set 0x12345678 /condition register(r0)==0x12345678
go.till register(r0)==0x12
r.s r4 <value>

# Core dump:
# grep core_pattern linux_src/Documentation/sysctl/kernel.txt
# cat /proc/sys/kernel/core_pattern
# man core
# man bash # search for ulimit
echo "core.dump.%e.%p" | sudo tee /proc/sys/kernel/core_pattern
ulimit -c unlimited
ulimit -a
# now launch executable crashed..

# Restore deleted file:
mkdir restore
sudo extundelete --restore-file other/commands -o restore /dev/sda5

# Linux kernel objdump
arm-linux-gnueabi-objdump -D -b binary -m arm Image

# View kernel messages (printk):
tail /var/log/syslog

# Mount initrd:
sudo mount -o loop -t sysfs /boot/initrd.img-3.11.0-12-generic <mount point>

# mount iso file:
fuseiso <image_file> <mount_point>
fuseiso --help
fusermount -u -z <mount_point> # unmount

# Turn screen off (without blocking):
xset dpms force off

# Code formatting (eclipse):
<Ctrl> + I

# Display stack size
ulimit -all
man 2 getrlimit

# Print hex dump (format - big endian):
xxd
# Format: 7A123456 (4 byte long values, native endianess = little):
hexdump -v -e '/4 "%08X\n"' FILE
# Format: 0000461f:   D5
hexdump -v -e '/1 "%08_ax:   "' -e '/1 "%02X\n"' FILE
# Format: C array: 0x0A, 0x69
hexdump -v -e '/1 "0x%02X, "' FILE
# Format: shell string of hex-encoded characters: \x0A\x69
hexdump -v -e '"\\" /1 "x%02X"' FILE
# Format: space-delimited bytes in hex: 0A 69
hexdump -v -e '" " /1 "%02X"' FILE

# Assembler thumb code:
".code 16\n\t"
".arch armv5te\n\t"

# "adb remount" from android device terminal (su required):
mount -r -w -o remount /system /system
mount -o rw,remount /

# assemble jump instruction (0x848a <main+10>:	bl	0x84dc):
bl m1
.skip 0x84dc - 0x848a - 4
m1:

# ARM, THUMB opcodes
binutils-2.23.2/opcodes/arm-dis.c
binutils-2.23.2/include/opcode/arm.h

# Scan for network devices (port will be blocked):
sudo arp-scan --interface=eth0 --localnet

# Internet fixing commands:
nm-tool
tracepath
route # get default gateway
cat /etc/resolv.conf
/etc/network/interfaces

# Partitions details:
ls /dev/disk/by-uuid
sudo blkid /dev/sda6
lsblk

# Linux directories rights access:
# If no access to file then open() syscall fails.
# Hard link- completely another file.
# Symbolic link - just a reference to real file.
# Folder read access:    can't open files (can't read, can't write), can't cd to folder,
#                        can ls folder contents (only file/folder names, no details)
# Folder execute access: can open files (read/write permissions depend on file permissions),
#                        can cd to folder, can't ls folder contents.
# Folder write access:   can create new files,
#                        can delete existed ones if execute folder access available.

# Format partition as a swap:
mkswap -L linux_swap /dev/sdaX

# update-alternatives:
ls -l /etc/alternatives
update-alternatives --query x-window-manager
update-alternatives --set x-window-manager $(which i3)

# Get audio/video file info (package libav-tools needed):
avprobe file.avi

# Brightness on samsung laptop:
# current brightness:
/sys/class/backlight/intel_backlight/brightness
# maximum brightness:
/sys/class/backlight/intel_backlight/max_brightness

# Flash player with webkit-based browsers:
http://sourceforge.net/p/vimprobable/wiki/Plugins/
strings /usr/lib/x86_64-linux-gnu/libwebkitgtk-3.0.so.0 | grep plugin

# Add ppa to /etc/apt/sources.list (debian):
deb http://ppa.launchpad.net/colingille/freshlight/ubuntu lucid main

# Create usb to install Windows 7 (without grub):
dd if=/dev/zero of=/dev/sdX count=3000
fdisk /dev/sdX
mkfs -t ntfs -f -L windows_7 /dev/sdX1
# Copy files:
mount /dev/sdX1 /mnt/usb_mnt
mount windows_7.iso /mnt/windows_iso
cp -r /mnt/windows_iso/* /mnt/usb_mnt/
umount /mnt/usb_mnt
# Fix MBR (add bootstrap code):
wget https://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.01.tar.xz
dd if=syslinux-6.01/bios/mbr/mbr.bin of=/dev/sdX
sync
# For grub2 version syslinux is not necessary (see os_settings/other_files/grub.cfg)

# Create bootable usb (grub2):
dd if=/dev/zero of=/dev/sdX count=3000
fdisk /dev/sdX
mkfs -t vfat -F 32 -n usb_boot /dev/sdX1
mount /dev/sdX1 /mnt
grub-install --boot-directory=/mnt/boot /dev/sdX
vim /mnt/boot/grub/grub.cfg
# Add memdisk (to boot iso/floppy/hard disk images):
wget https://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.01.tar.xz
cp syslinux-6.01/bios/memdisk/memdisk /mnt/boot/memdisk
# Add mhdd:
wget http://www.ihdd.ru/download/software/mhdd/mhdd32ver4.6iso.zip
cp mhdd32ver4.6.iso /mnt/boot/mhdd.iso
# Add memtest:
wget http://www.memtest86.com/downloads/memtest86-iso.gz
cp memtest86-iso /mnt/boot/memtest.iso
# See os_settings/other_files/grub.cfg

# Create bootable iso image (for cdrom):
mkdir -p image_root/boot/grub
vim image_root/boot/grub/grub.cfg
grub-mkrescue -o grub.iso image_root

# Add bridge:
brctl addbr br0
brctl addif br0 eth0

# Set mac address:
ifconfig eth0 hw ether 12:34:56:78:9a:bc
ip link set eth0 address 12:34:56:78:9a:bc

# up/down interface:
ifconfig eth0 up
ip link set wlan0 down
man ip-link

# view default route:
ip route

# Set static ip (iproute package in debian):
ip addr add 192.168.1.29/24 dev wlan0
ip route add default via 192.168.1.1
# ip addr del 106.124.32.34/24 dev eth0

# Release current lease and stop running DHCP client:
dhclient -r

# Get ip by DHCP:
dhclient -v eth0

# DNS server:
/etc/resolv.conf

# Add default gateway:
route add default gw 192.168.1.1

# Get wireless networks list:
iwlist wlan0 scan

# Connect to wireless network:
iwconfig wlan0 essid Egorator key 9173557391
# After this I'm unable to get IP by DHCP. Need to run wpa_supplicant first?

# Use ifup to configure according to /etc/network/interfaces:
ifup --all --verbose

# Wireless devices manipulation (run as root):
iw dev wlan0 <command>
commands: link, scan
iw dev wlan0 connect <SSID>

# Write file to CD-R:
genisoimage -r -J -o cd_image.iso <folder> # create iso image
# Check (paranoidal) image correctness:
sudo mount -t iso9660 -o ro cd_image.iso /media/cd_mount_point
sudo wodim -v -eject dev=/dev/sr0 /home/user/img.iso # -multi

# Launch wi-fi access point:
wifi_ap.sh -w 1+2 wlan0 eth0 AP_NAME PASSWORD

# use backtrace(3) with addr2line(1):
# copy code from example in backtrace(3):
gcc -O0 -g3 backtrace_example.c -o backtrace_exe
./backtrace_exe 4 | grep -o '\[0x.\+\]' | cut -d'[' -f2 | cut -d']' -f1 | addr2line -p -f -e ./backtrace_exe

# Jtag (J-Link) do not cache flash memory (gdb command):
monitor ExcludeFlashCacheRange START_ADDRESS,SIZE

# gdb: debug child process:
set follow-fork-mode child
# gdb: see also:
show follow-fork-mode

# gdb: set breakpoint on all functions:
rbreak .

# Connect to running gdbserver (gdb client):
target remote REMOTE:PORT
# Connect to running gdbserver (lldb client):
gdb-remote REMOTE:PORT

# Add symbols (gdb):
symbol-file FILE
# Add symbols (lldb):
target symbols add # TODO

# Execute debugging commands from file:
gdb -x FILE
lldb -s FILE

# gdb: define command (next and refresh tui screen):
define next_refresh
next
refresh
end

# gdb: view next source line to to be executed:
frame

# gdb: disable overloading of c++ function names:
set overload-resolution off

# gdb: debug program with core dump:
gdb -e PROGRAM -c core.dump
gdb PROGRAM core.dump
info proc mappings
backtrace full
# in gdb:
(gdb) core-file /home/user/my_core_file

# gdb: stop on writing to stderr (x86_64 only):
b write if 2 == $rdi
# lldb: stop on writing to stderr (x86_64 only):
br s -n write -c '2 == $rdi' # TODO this is wrong
# gdb: stop on writing to stdout of some text (x86_64 only):
b write if (1 == $rdi) && (0 != strstr($rsi, "some text"))

# gdb: stop on errno modification:
watch *&errno

# gdb: stop on file open (x86_64 only):
b open if strcmp($rdi, "/tmp/some/file") == 0

# gdb: do not stop on signal SIGUSR1 (ignore signal):
handle SIGUSR1 noprint nostop
handle SIGTRAP nostop
handle all nostop noprint

# gdb: answer "yes" on "No source file named FILE.c. Make breakpoint pending on future shared library load? (y or [n])":
set breakpoint pending on

# gdb: save value in gdb variable:
set $var_name = expression
# gdb: overwrite variable in program:
set var_name = expression

# gdb: step out of a function:
finish

# gdb: (tui) refresh screen:
refresh

# gdb: debug threads.
# Make CTRL-C / breakpoints affect only currently selected thread:
set non-stop on
# gdb: allow to control inferior in asynchronous mode:
set target-async on
# gdb: list threads:
info thread
# lldb: list threads:
thread list
# lldb: get thread name:
thread info
# gdb: switch to thread specified by a given number (ID, see "info thread"):
thread ID
# gdb: switch to thread specified by a given number (ID)
thread select ID
# gdb: interrupt current thread (doesn't work if target-async is off):
interrupt
# gdb: interrupt all threads (doesn't work if target-async is off):
interrupt -a

# gdb: write to process memory from file (read from file):
restore FILE binary START_ADDRESS_IN_MEMORY

# gdb: write to file from process memory [START .. STOP) (dump):
dump binary memory FILE START STOP

# gdb: catch syscall:
catch syscall chroot

# gdb: disable/enable breakpoints:
disable num
enable num

# gdb: conditional breakpoints (b if):
cond <bnum> <expression> # stop if <expression> == true
b LOCATION if CONDITION
ignore <bnum> <count>
# lldb: conditional breakpoints:
br s -n FUNCTION_NAME -c 'CONDITION'

# gdb: set a breakpoint for all functions matching REGEXP:
rbreak func_prefix_*

# gdb: breakpoints on read/write:
# watch *0xaab12450 [mask 0xfffffff0]
watch -  only breaks on write
rwatch - only breaks on read
awatch - breaks on read/write.

# gdb: delete breakpoint
del <breakpoint number>
# lldb: delete breakpoint
br de <breakpoint number>

# gdb: list registers
info registers
# lldb: list registers (general-purpose)
re r
# lldb: list registers (all)
re r -a
re r rax

# gdb: list breakpoints
info break
# lldb: list breakpoints
br l

# gdb: display an array of values:
disp {$r0, $r1}

# gdb: write into memory
set *0xAb000000 = 0xcd
set {int}0xAb000000 = 0xcd

# gdb: load symbols from file
sym FILE

# gdb view source files:
info sources

# gdb: sysroot (to debug shared libraries with gdb-server):
set sysroot HOST_COPY_OF_DEBUGGIE_ROOT_WITH_LIBS_AND_LD
set solib-search-path DIR # not recommended, single step doesn't work without ld

# gdb: change sources path:
set substitute-path FROM TO

# gdb: view loaded shared libraries:
info sharedlibrary

# Generate core dump on runtime error:
ulimit -c unlimited && ./launch_buggy_program



# Core dump analysis with gdb (till end of file):



When software crashes, core dump normally appears in root folder of your
USB stick (which must be inserted in YOUR_DEVICE). Tested on blue USB 3.0 port.
Install gdb-multiarch on your Linux-powered PC:

$ sudo apt-get install gdb-multiarch

Note: you can use arm-smth-linux-gnueabi-gdb from YOUR_DEVICE toolchain but it
is not recommended, since it loads shared libraries from toolchain by default,
which differ with shared libraries used by YOUR_DEVICE software. This can lead to
confusion in case if crash appeared in shared library: gdb will display wrong
stack frames (and wrong backtrace).
Insert USB stick in your pc and copy core dump.
Extract coredump:

$ ls ~/core_dump
Coredump.executable.pid.gz
$ gunzip Coredump.EXECUTABLE_NAME.pid.gz
$ ls ~/core_dump
Coredump.EXECUTABLE_NAME.pid
$

Launch gdb-multiarch:

$ gdb-multiarch
GNU gdb (Debian 7.7.1+dfsg-5) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word".
(gdb)
Set architecture to ARM:
(gdb) set architecture arm
The target architecture is assumed to be arm
(gdb)

Note: this step is not required if you decided to use gdb from YOUR_DEVICE
toolchain (or any other gdb preconfigured for ARM by default).
Determine executable file which generated core dump and crash address:

(gdb) core-file Coredump.EXECUTABLE_NAME.pid
[New LWP 918]
...
[New LWP 1557]
Core was generated by `/bin/EXECUTABLE_NAME -arg1'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0xa71116c0 in ?? ()
(gdb)

Now we knew that core dump was generated by /bin/EXECUTABLE_NAME and crash address is
0xa71116c0. Check whether crash was in EXECUTABLE_NAME or in some shared library:

(gdb) info proc mappings
    0xa6e8c000 0xa6e8d000     0x1000        0x0 /dev/shm/sem.AYIbvt (deleted)
...
    0xa7092000 0xa71ca000   0x138000        0x0 /bin/lib/libc-2.18.so # <- our crash address is within this range
...
    0xa71d0000 0xa71ee000    0x1e000        0x0 /bin/lib/libgcc_s.so.1
(gdb)

Now we know that crash was within libc. Note that in this case gdb still doesn't
have enough information to reconstruct backtrace (it is empty now):

(gdb) bt
#0  0xa71116c0 in ?? ()
#1  0x00000000 in ?? () # <- our backtrace should be here, however it is not yet..
(gdb)
Exit from gdb:
(gdb) q
$

Search for not stripped version of file which generated core dump. Copy it to
our "core_dump" folder:

$ cd /home/build/Perforce/dir3/dir4
$ find -type f -name EXECUTABLE_NAME
$ cp ./BIN/SymbolFiles/bin/EXECUTABLE_NAME ~/core_dump/

Make sure EXECUTABLE_NAME contain debugging info:

$ readelf --sections ~/core_dump/EXECUTABLE_NAME | grep debug
  [31] .debug_aranges    PROGBITS        00000000 804b590 103188 00      0   0  8
  [32] .debug_info       PROGBITS        00000000 814e718 36190510 00      0   0  1
  [33] .debug_abbrev     PROGBITS        00000000 3e2dec28 11ab22e 00      0   0  1
  [34] .debug_line       PROGBITS        00000000 3f489e56 270d2c1 00      0   0  1
  [35] .debug_frame      PROGBITS        00000000 41b97118 995ad0 00      0   0  4
  [36] .debug_str        PROGBITS        00000000 4252cbe8 21fded2 01  MS  0   0  1
  [37] .debug_loc        PROGBITS        00000000 4472aaba 7b4de56 00      0   0  1
  [38] .debug_macinfo    PROGBITS        00000000 4c278910 02110e 00      0   0  1
  [39] .debug_ranges     PROGBITS        00000000 4c299a20 1537ce0 00      0   0  8
$

If you see output like this, then ELF file contains debugging info. Else (if it
was stripped or compiled without "-g") the output is empty.
Now reload gdb, and determine where do we need to put libc by executing gdb
command "info sharedlibrary" (gdb should use it to reconstruct correct backtrace):

$ cd ~/core_dump
$ gdb-multiarch
GNU gdb (Debian 7.7.1+dfsg-5) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word".
(gdb) set architecture arm
The target architecture is assumed to be arm
(gdb) file EXECUTABLE_NAME
Reading symbols from EXECUTABLE_NAME...done.
(gdb) core-file Coredump.EXECUTABLE_NAME.pid
[New LWP 918]
...
[New LWP 1557]
warning: Could not load shared library symbols for 87 libraries, e.g. /dir1/dir2/libSomething.so.
Use the "info sharedlibrary" command to see the complete listing.
Do you need "set solib-search-path" or "set sysroot"?
Core was generated by `/bin/EXECUTABLE_NAME -arg1'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0xa71116c0 in ?? ()
(gdb) info sharedlibrary
    No          /lib/libgcc_s.so.1
...
    No          /lib/libc.so.6 # <- our libc must be in folder "/lib" and must be named as "libc.so.6" (note that gdb command "info proc mappings" reported another path and name: "/bin/lib/libc-2.18.so")
...
    No          /lib/ld-linux.so.3
(gdb)

Search for not stripped version of libc and copy it:

$ cd /home/build/Perforce/dir3/dir4
$ find -type f -name libc.so.6
$ # <- no results, try another name:
$ find -type f -name libc-2.18.so
$ mkdir -p ~/core_dump/rootfs/lib
$ cp ./SymbolFiles/bin/lib/libc-2.18.so ~/core_dump/rootfs/lib/libc.so.6 # note: name changed from "libc-2.18.so" to "libc.so.6" 

Make sure libc contains debugging info:

$ readelf --sections ~/core_dump/rootfs/lib/libc.so.6 | grep debug
  [70] .debug_aranges    PROGBITS        00000000 13b710 00b830 00      0   0  8
  [71] .debug_info       PROGBITS        00000000 146f40 437354 00      0   0  1
  [72] .debug_abbrev     PROGBITS        00000000 57e294 0a1625 00      0   0  1
  [73] .debug_line       PROGBITS        00000000 61f8b9 0caddf 00      0   0  1
  [74] .debug_frame      PROGBITS        00000000 6ea698 0228b8 00      0   0  4
  [75] .debug_str        PROGBITS        00000000 70cf50 026d0f 01  MS  0   0  1
  [76] .debug_loc        PROGBITS        00000000 733c5f 141004 00      0   0  1
  [77] .debug_ranges     PROGBITS        00000000 874c63 02bc20 00      0   0  1
$

Libc contains debugging info.
Reload gdb and use gdb command "set sysroot" to point gdb from where to load
absolute shared library symbol files:

$ cd ~/core_dump
$ gdb-multiarch
GNU gdb (Debian 7.7.1+dfsg-5) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word".
(gdb) set architecture arm
The target architecture is assumed to be arm
(gdb) set sysroot rootfs
(gdb) file EXECUTABLE_NAME
Reading symbols from EXECUTABLE_NAME...done.
(gdb) core-file Coredump.EXECUTABLE_NAME.pid
warning: exec file is newer than core file.
[New LWP 918]
...
[New LWP 1557]
warning: Could not load shared library symbols for 86 libraries, e.g. /dir1/dir2/libSomething.so.
Use the "info sharedlibrary" command to see the complete listing.
Do you need "set solib-search-path" or "set sysroot"?
Core was generated by `/bin/EXECUTABLE_NAME -arg1'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  memcpy () at ../ports/sysdeps/arm/memcpy.S:202
202    ../ports/sysdeps/arm/memcpy.S: No such file or directory.
(gdb)

Note that gdb commands order matters. Please follow these steps precisely.
Check whether gdb loaded our libc:

(gdb) info sharedlibrary
                        No          /dir1/dir2/libSomething.so
...
                        No          /lib/libgcc_s.so.1
0xa70a7e70  0xa71a60f8  Yes         rootfs/lib/libc.so.6 # <- gdb has loaded our libc successfully
                        No          /lib/ld-linux.so.3
...
                        No          /lib/libflash.so
(gdb)
Now we can finally examine backtrace:
(gdb) bt
#0  memcpy () at ../ports/sysdeps/arm/memcpy.S:202
#1  0x02ce050c in some_func (param=0x50743b14, param@entry=0x50743b0c) at /home/build/Perforce/dir3/dir4/dir5/dir6/Src/dir7/Src/some_module/some_module_Init.c:150
#2  0x02ce1f00 in some_module_Init (type_disc=<optimized out>) at /home/build/Perforce/dir3/dir4/dir5/dir6/Src/dir7/Src/some_module/some_module_Init.c:1320
#3  0x02cdcd68 in dir7_Init_Disc (disc_type=<optimized out>, pLoader=<optimized out>) at /home/build/Perforce/dir3/dir4/dir5/dir6/Src/dir7/Src/dir7_Init_Disc.c:396
#4  0xb0e775c4 in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)

You can use gdb commands "bt full" and "frame" to examine stack in more detail.
If you have built YOUR_DEVICE software on build server but want to examine
backtrace on your local PC, you may encounter issue viewing source files in gdb:
(gdb) l some_func
136    /home/build/Perforce/dir3/dir4/dir5/dir6/Src/dir7/Src/some_module/some_module_Init.c: No such file or directory.

Assume you have mounted build server to your "/media/build_server" folder. To fix this issue execute gdb command "set substitute-path":
(gdb) set substitute-path /home/build/Perforce/dir3/dir4 /media/build_server/home/build/Perforce/dir3/dir4

Now you can view sources within gdb:
(gdb) l some_func
136
137    //    comment 1
138        /* hardcoding... */
139
140    //    comment 2
141        buf_smth = ctx.buf + ctx.pos_some_module;
142        pos = 0;
143
144        func1(param, buf_some_module, pos);
145        func1(param, buf_some_module, pos);
(gdb)

# Do not insert anything at the end of the file
