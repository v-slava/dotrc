" Ctrl-G creates a window showing detailed information about the current file.
" cl     change link target
" al     puts symbolic links with absolute paths.
" rl     puts symbolic links with relative paths.

" ------------------------------------------------------------------------------

" This is the actual command used to start vi.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

" set vicmd=nvim
" set vicmd=vim
" set vicmd="vim --servername VIM"
set vixcmd='e'

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.

set trash

" This is how many directories to store in the directory history.

set history=100

" Automatically resolve symbolic links on l or Enter.

set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

set fastrun

" Natural sort of (version) numbers within text.

set sortnumbers

" Maximum number of changes that can be undone.

set undolevels=100

" If you installed the vim.txt help file set vimhelp.
" If would rather use a plain text help file set novimhelp.

set novimhelp

" If you would like to run an executable file when you
" press return on the file name set this.

set norunexec

" Use KiB, MiB, ... instead of KB, MB, ...

set noiec

" Selected color scheme

colorscheme Default

" The FUSE_HOME directory will be used as a root dir for all FUSE mounts.
" Unless it exists with write/exec permissions set, vifm will attempt to
" create it.

set fusehome=/tmp/vifm_FUSE

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.

set timefmt=%T\ \ %F

" Show list of matches on tab completion in command-line mode

set wildmenu

" Ignore case in search patterns unless it contains at least one uppercase
" letter

set ignorecase
set smartcase

" Don't highlight search results automatically

set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists

set scrolloff=4

" Don't do too many requests to slow file systems

set slowfs=curlftpfs

" Set custom status line look

set statusline="  %t%= %A %10u:%-7g %15s %30d  "

" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf
filextype *.pdf
	\ pdf_djvu_open.sh %c,
	\ apvlv %c %i &,
	\ zathura %c %i &,
	\ mupdf %c &,
	\ xpdf %c

" fileviewer *.pdf pdftotext -nopgbrk %c -

" PostScript
" filextype *.ps,*.eps,*.ps.gz
" 	\ {View in zathura}
" 	\ zathura %f,
" 	\ {View in gv}
" 	\ gv %c %i &,

" Djvu
filextype *.djvu
	\ pdf_djvu_open.sh %c,
	\ apvlv %c %i &,
	\ zathura %c %i &,

" Audio
filetype *.wav,*.mp3,*.flac,*.ogg,*.m4a,*.wma,*.ape,*.ac3
	\ alsaplayer -E %f,
	\ ffplay -nodisp %c,
	\ mplayer %f,
	\ ffplay %c,

" fileviewer *.mp3 mp3info
" fileviewer *.flac soxi

" Video
filextype *.f4m,*.flv,*.avi,*.mp4,*.wmv,*.3gp,*.ogv,*.mkv,*.mpg,*.vob,*.flv,*.m2v,*.mov,*.webm,*.ts,*.m4v
	\ smplayer %f &,
	\ mplayer %f &,
	\ ffplay -fs %c,
	\ dragon %f,

" fileviewer *.flv,*.avi,*.mp4,*.wmv,*.3gp,*.ogv,*.mkv,*.mpg,*.vob,*.flv,*.m2v,*.mov,*.webm,*.ts,*.m4v
" 	\ avprobe -pretty %c 2>&1

" Web
filextype *.html,*.htm
	\ chromium %f &,
	\ vimb %f %i &,
	\ dwb %f %i &,
	\ uzbl-browser %f %i &,

" filetype *.html,*.htm links, lynx

" Object
" filetype *.o nm %f | less

" Man page
" filetype *.[1-8] gtbl %c | groff -Tascii -man | less
" fileviewer *.[1-8] gtbl %c | groff -Tascii -man | col -b

" Image
filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
	\ view_image.sh %c,
	\ gliv %f,
	\ sxiv %f,
	\ gpicview %c,

filextype *.xcf
	\ gimp %f,

" fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm convert -identify %f -verbose /dev/null

" Check MD5 hash sum
" filetype *.md5 md5sum -c %f,

" Check GPG signature
" filetype *.asc !!gpg --verify %c,

" Torrent
" filetype *.torrent ktorrent %f &
" fileviewer *.torrent dumptorrent -v %c

" FuseZipMount
" filetype *.zip,*.jar,*.war,*.ear,*.oxt
" 	\ {Mount with fuse-zip}
" 	\ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
" 	\ {View contents}
" 	\ zip -sf %c | less,
" 	\ {Extract here}
" 	\ tar -xf %c,

" fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" ArchiveMount
" filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz
" 	\ {Mount with archivemount}
" 	\ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,

" fileviewer *.tgz,*.tar.gz tar -tzf %c
" fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
" fileviewer *.tar.txz,*.txz xz --list %c

" Rar2FsMount and rar archives
" filetype *.rar
" 	\ {Mount with rar2fs}
" 	\ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,

" fileviewer *.rar unrar v %c

" IsoMount
" filetype *.iso
" 	\ {Mount with fuseiso}
" 	\ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
" filetype *.ssh
" 	\ {Mount with sshfs}
" 	\ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR,

" FtpMount
" filetype *.ftp
" 	\ {Mount with curlftpfs}
" 	\ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR,

" Fuse7z and 7z archives
" filetype *.7z
" 	\ {Mount with fuse-7z}
" 	\ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,

" fileviewer *.7z 7z l %c

" Office files
filextype *.rtf,*.fodt,*.odt,*.odg,*.ods,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.ppt,*.pptx libreoffice %f %i &
" fileviewer *.doc catdoc %c
" fileviewer *.docx, docx2txt.pl %f -

filetype *.pcapng wireshark %f &

" filetype *.gl,*.vim,*vimrc,.*vimrc vim %f

" TuDu files
" filetype *.tudu tudu -f %c

" Qt projects
" filextype *.pro qtcreator %f &

" Directories
" fileviewer .*/,*/ tree -a %f

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer * pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm runs
" Like in previous versions of vifm
" set vifminfo=options,filetypes,commands,bookmarks,dhistory,state,cs
" Like in vi
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" windo set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" windo filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" ------------------------------------------------------------------------------
" winrun % normal gg

" Sample mappings

" Start shell in current directory
nnoremap s :shell<CR>

" Display sorting dialog
nnoremap S :sort<CR>

" Toggle visibility of preview window
nnoremap w :view<CR>
vnoremap w :view<CR>gv

" Open file in the background using its default program
" nnoremap gb :file &<CR>l

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap A cw
nnoremap cc cw<c-u>
nnoremap cn cW<c-u>
" rename using vim:
nnoremap cv :rename<CR>
" nnoremap A cw<c-w>

" Toggle wrap setting on ,w key
" nnoremap ,w :set wrap!<CR>

" Example of standard two-panel file managers mappings
" nnoremap <f3> :!less %f<CR>
" nnoremap <f4> :edit<CR>
" nnoremap <f5> :copy<CR>
" nnoremap <f6> :move<CR>
" nnoremap <f7> :mkdir<space>
" nnoremap <f8> :delete<CR>

" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]
mark h ~
mark b ~/bin
mark d ~/downloads
" mark o ~/other
mark t ~/temporary
mark T /tmp
mark w ~/workspace
mark o ~/os_settings
mark u /media/usb
mark f /media/files
mark n /media/files/music/new

nmap b :bmarks<CR>/

" :bmark! path tag1 [tag2 [tag3...]]
bmark! /media/files/trash_vifm/.. trash_vifm
" TODO check whether fixed:
" bmark! ~/other/my_samples/single_sources/.. single_sources
bmark! /home/volkov/other/my_samples/single_sources/.. single_sources
bmark! /home/volkov/other/my_samples/vim_prj_settings_example/.. vim_project_settings
bmark! /home/volkov/other/my_samples/multiple_sources/.. multiple_sources
bmark! /home/volkov/other/books/.. books
bmark! /home/volkov/other/compiler_overloading/compiler_settings compiler_overloading
bmark! /home/volkov/other/toolchains/.. toolchains
bmark! /var/lib/usbutils/usb.ids usb.ids lsusb

nnoremap ,c :write | execute ':!e --wait ~/os_settings/home_settings/.config_xdg/vifm/vifmrc && cp ~/os_settings/home_settings/.config_xdg/vifm/vifmrc $MYVIFMRC && if [ -f ~/workspace/dotrc_s/home_settings/.config_xdg/vifm/vifmrc ] ; then cat ~/workspace/dotrc_s/home_settings/.config_xdg/vifm/vifmrc >> $MYVIFMRC ; fi' | restart<CR>
nnoremap ,C :write | execute ':!mkdir -p ~/workspace/dotrc_s/home_settings/.config_xdg/vifm && e --wait ~/workspace/dotrc_s/home_settings/.config_xdg/vifm/vifmrc && cp ~/os_settings/home_settings/.config_xdg/vifm/vifmrc $MYVIFMRC && if [ -f ~/workspace/dotrc_s/home_settings/.config_xdg/vifm/vifmrc ] ; then cat ~/workspace/dotrc_s/home_settings/.config_xdg/vifm/vifmrc >> $MYVIFMRC ; fi' | restart<CR>
nnoremap ,v :!e --wait ~/os_settings/home_settings/.vimrc && cp ~/os_settings/home_settings/.vimrc ~/.vimrc<CR>
nnoremap ,e :!e --wait ~/os_settings/home_settings/.spacemacs && cp ~/os_settings/home_settings/.spacemacs ~/.spacemacs<CR>
nnoremap ,b :!e --wait ~/os_settings/home_settings/.bashrc && cp ~/os_settings/home_settings/.bashrc ~/.bashrc<CR>
nnoremap ,B :!e --wait ~/workspace/dotrc_s/home_settings/.bashrc<CR>
nnoremap ,i :!e --wait ~/os_settings/home_settings/.config_xdg/i3/config && cp ~/os_settings/home_settings/.config_xdg/i3/config ~/.config_xdg/i3/config && i3-msg reload<CR>
nnoremap ,u :!e ~/os_settings/usefull_info<CR>
nnoremap ,r :!e ~/other/remarks<CR>

set syscalls
set trashdir=/media/files/trash_vifm

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window
" %i completely ignore command output.

" Use ';' as synonym of ':'
" nnoremap ; :
" nnoremap : ;

" Exit from vifm:
nnoremap <c-d> :exit<CR>
vmap <c-d> :exit<CR>
" nnoremap ii
nnoremap e <nop>
nnoremap q :exit<CR>
vmap q :exit<CR>

" Launch programs:
nnoremap rg :!./%c %i &<CR>
nnoremap rs :! $HOME/os_settings/other_files/vifm_run_command.sh --pause "./%c"<CR>
" Launch make:
nnoremap rm :! $HOME/os_settings/other_files/vifm_run_command.sh --pause "make"<CR>
nnoremap rc :! $HOME/os_settings/other_files/vifm_run_command.sh --pause "make clean"<CR>

nmap V :!vim<space>
nmap E :!e<space>
nmap cx :! $HOME/os_settings/other_files/toggle_executable.sh %"f<CR>
vmap cx :! $HOME/os_settings/other_files/toggle_executable.sh %"f<CR>

nnoremap ocd :! ${CROSS_COMPILE}objdump -D ./%c | less -i<CR>
nnoremap od :! ${CROSS_COMPILE}objdump -D ./%c | c++filt | less -i<CR>
nnoremap opd :! ${CROSS_COMPILE}objdump --prefix-address --show-raw-insn -D ./%c | c++filt | less -i<CR>
nnoremap oz :! ${CROSS_COMPILE}objdump -D -z ./%c | c++filt | less -i<CR>
nnoremap opz :! ${CROSS_COMPILE}objdump --prefix-address --show-raw-insn -D -z ./%c | c++filt | less -i<CR>
nnoremap os :! ${CROSS_COMPILE}objdump -S ./%c | less -i<CR>
nnoremap ops :! ${CROSS_COMPILE}objdump --prefix-address --show-raw-insn -S ./%c | less -i<CR>
nnoremap ob :! ${CROSS_COMPILE}objdump -D -b binary -m arm -Mforce-thumb ./%c | less -i<CR>
nnoremap opb :! ${CROSS_COMPILE}objdump --prefix-address --show-raw-insn -D -b binary -m arm -Mforce-thumb ./%c | less -i<CR>
nnoremap ot :! ${CROSS_COMPILE}objdump -t ./%c | c++filt | less -i<CR>

nnoremap xx :! $HOME/os_settings/other_files/extract_progress.sh %f<CR>
vmap xx :! $HOME/os_settings/other_files/extract_progress.sh %f<CR>
nmap xc :! $HOME/os_settings/other_files/compress.sh %f<CR>

" Yank current directory path into the clipboard
nnoremap yd :!echo -n "%d" | clipboard.sh<CR>
" Yank current file (full path) into the clipboard
nnoremap yf :!echo -n "%c:p" | clipboard.sh<CR>
" Yank current file (name only) into the clipboard
nnoremap yn :!echo -n "%c" | clipboard.sh<CR>
" Yank current file's size (in bytes) into the clipboard
nnoremap yb :!du -b "%c" | cut -f1 | clipboard.sh -n<CR>
" Rename file: replace spaces with underscores:
nnoremap ns :!echo -n "%c" | sed -e 's/ /_/g' | xargs mv %c <CR>
" Rename file: replace big letters with little ones:
nnoremap nl :!echo -n "%c" | tr '[:upper:]' '[:lower:]' | xargs mv %c <CR>
" nnoremap nl :!echo -n "%c" | tr '[:upper:]' '[:lower:]' && echo<CR>

" Mount / umount:
nnoremap am :! mount /dev/sdb1 || mount /dev/sdb || mount /dev/sdb1<CR>
nnoremap cm :! mount /dev/sdc1 || mount /dev/sdc || mount /dev/sdc1<CR>
nnoremap au :! umount /media/usb<CR>

command df echo -e "\nFile: %c\n" && df -h %c 2> /dev/null && echo && vifm-pause
command mkcd :mkdir %a | cd %a
nmap isy :sync!<CR>
" swap panels:
nmap isw <c-w>x
nmap id :winrun ^ !diff.sh %d/%c %C<CR>
nmap iv :winrun ^ !vimdiff.sh %d/%c %C<CR>
nmap ig :winrun ^ !diffuse %d/%c %C<CR>
nmap ix :winrun ^ !dhex %d/%c %C<CR>
nmap im :winrun ^ !mc %d %D<CR>
nmap if :winrun ^ !$HOME/os_settings/other_files/open_terminal.sh vifm %d %D &<CR>
nmap it :!touch %c<CR>
nmap ib :!beautify_file.sh %d/%c<CR>
command minicom nohup $HOME/os_settings/other_files/minicom.sh 1>/dev/null
command rminicom $HOME/os_settings/other_files/remote_minicom.sh 1>/dev/null
command hexview xxd %c | less
command hexedit hed %c

